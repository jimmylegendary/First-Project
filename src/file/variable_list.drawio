<mxfile host="65bd71144e">
    <diagram id="X_CRF5c4p3BeQWpbo8O4" name="Page-1">
        <mxGraphModel dx="2019" dy="974" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="4" value="def get_args():&lt;br&gt;&lt;br&gt;&amp;nbsp;parser.add_argument('--target', type=str, required=True, choices=['vital','any_cvd'])&amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp;parser.add_argument('--out_path', default='E:\\temp\\15_ahi\\final', type=str)&amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp;parser.add_argument('--save_path', default='E:\\temp\\15_ahi\\final', type=str)&amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp;parser.add_argument('--feature_path', default='D:\\Hyunji...', type=str)" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="60" y="110" width="780" height="130" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="class MyDataset: &lt;br&gt;&amp;nbsp;feature_name : data column명&lt;br&gt;&amp;nbsp;x: np.ndarray : 학습용 data&lt;br&gt;&amp;nbsp;y: np.ndarray : 실제 정답" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="60" y="290" width="180" height="70" as="geometry"/>
                </mxCell>
                <mxCell id="25" style="edgeStyle=none;html=1;exitX=0.068;exitY=-0.031;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;exitPerimeter=0;" edge="1" parent="1" source="9" target="5">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="class MyResult:&lt;br&gt;&amp;nbsp; self.preds: np.ndarray &lt;br&gt;&amp;nbsp; self.reals: np.ndarray &lt;br&gt;&amp;nbsp; self.probs: np.ndarray &lt;br&gt;&amp;nbsp; self.feature_imporatnces: list &lt;br&gt;&amp;nbsp; self.best_params: list" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="55" y="390" width="190" height="100" as="geometry"/>
                </mxCell>
                <mxCell id="33" style="edgeStyle=none;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.14;entryY=1.015;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="10" target="9">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="def extract_features():&lt;br&gt;&amp;nbsp; self.grouping_data = concated_group &lt;br&gt;&amp;nbsp; self.outcome = outcome" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="55" y="720" width="210" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="29" style="edgeStyle=none;html=1;exitX=0.25;exitY=0;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="14" target="6">
                    <mxGeometry relative="1" as="geometry">
                        <Array as="points">
                            <mxPoint x="580" y="440"/>
                        </Array>
                    </mxGeometry>
                </mxCell>
                <mxCell id="34" style="edgeStyle=none;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;exitX=0.125;exitY=0.008;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="1" source="9" target="6">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="class Tree:&lt;br&gt;&amp;nbsp; self.dataset: MyDataset &lt;br&gt;&amp;nbsp; self.target_func = { 'vital': self.select_mortality_ahi_subject, 'any_cvd': self.select_cvd_ahi_subject }&lt;br&gt;&amp;nbsp; self.classifier = { 'xgb': xgb, 'lgb': lgb, 'catb': catb, 'rf': rf, 'lr': lr }&lt;br&gt;&amp;nbsp; self.result : dict[str, MyResult] = {}&lt;br&gt;&amp;nbsp; self.hyperparameters = {'xgb': 'xgb' : { 'xgbclassifier__max_depth': [2,3,4,5,6,7,8,9], 'xgbclassifier__n_estimators': [..],..}&lt;br&gt;&amp;nbsp; self.drop_list =\ ['Unnamae', 'name' .. ]" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="55" y="540" width="770" height="130" as="geometry"/>
                </mxCell>
                <mxCell id="32" style="edgeStyle=none;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.432;entryY=1.023;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="12" target="9">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="def prepare_dataset():&lt;br&gt;&amp;nbsp; self.cv = cv &lt;br&gt;&amp;nbsp; self.folded_dataset.append(dataset)&lt;br&gt;&amp;nbsp; self.dataset.feature_name&lt;br&gt;&amp;nbsp; self.dataset.x&lt;br&gt;&amp;nbsp; self.dataset.y" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="280" y="720" width="210" height="110" as="geometry"/>
                </mxCell>
                <mxCell id="30" style="edgeStyle=none;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.786;entryY=1;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="14" target="9">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="14" value="def train():&lt;br&gt;&amp;nbsp; result = Myresult()&lt;br&gt;&amp;nbsp; result.preds = np.array(pred_list)&lt;br&gt;&amp;nbsp; result.reals = np.array(real_list)&lt;br&gt;&amp;nbsp; result.probs = np.array(prob_list)&lt;br&gt;&amp;nbsp; result.feature_imporatnces =feature_importance_list&lt;br&gt;&amp;nbsp; result.best_params = best_param_list &lt;br&gt;&amp;nbsp; self.result[classifier_name] = result&amp;nbsp;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="500" y="720" width="320" height="130" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>